{
  "api/UniEx.ColorExtension.html": {
    "href": "api/UniEx.ColorExtension.html",
    "title": "Class ColorExtension | UniEx",
    "keywords": "Class ColorExtension Inheritance Object ColorExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class ColorExtension Methods AddA(ref Color, Single) Add a component of an existing Color. Declaration public static ref Color AddA(this ref Color self, float a) Parameters Type Name Description Color self Self color. Single a Add value. Returns Type Description Color Add result. AddB(ref Color, Single) Add b component of an existing Color. Declaration public static ref Color AddB(this ref Color self, float b) Parameters Type Name Description Color self Self color. Single b Add value. Returns Type Description Color Add result. AddG(ref Color, Single) Add g component of an existing Color. Declaration public static ref Color AddG(this ref Color self, float g) Parameters Type Name Description Color self Self color. Single g Add value. Returns Type Description Color Add result. AddR(ref Color, Single) Add r component of an existing Color. Declaration public static ref Color AddR(this ref Color self, float r) Parameters Type Name Description Color self Self color. Single r Add value. Returns Type Description Color Add result. MultiplyA(ref Color, Single) Multiply a component of an existing Color. Declaration public static ref Color MultiplyA(this ref Color self, float a) Parameters Type Name Description Color self Self color. Single a Multiply value. Returns Type Description Color Multiply result. MultiplyB(ref Color, Single) Multiply b component of an existing Color. Declaration public static ref Color MultiplyB(this ref Color self, float b) Parameters Type Name Description Color self Self color. Single b Multiply value. Returns Type Description Color Multiply result. MultiplyG(ref Color, Single) Multiply g component of an existing Color. Declaration public static ref Color MultiplyG(this ref Color self, float g) Parameters Type Name Description Color self Self color. Single g Multiply value. Returns Type Description Color Multiply result. MultiplyR(ref Color, Single) Multiply r component of an existing Color. Declaration public static ref Color MultiplyR(this ref Color self, float r) Parameters Type Name Description Color self Self color. Single r Multiply value. Returns Type Description Color Multiply result. SetA(ref Color, Single) Set a component of an existing Color. Declaration public static ref Color SetA(this ref Color self, float a) Parameters Type Name Description Color self Self color. Single a Set value. Returns Type Description Color Set result. SetB(ref Color, Single) Set b component of an existing Color. Declaration public static ref Color SetB(this ref Color self, float b) Parameters Type Name Description Color self Self color. Single b Set value. Returns Type Description Color Set result. SetG(ref Color, Single) Set g component of an existing Color. Declaration public static ref Color SetG(this ref Color self, float g) Parameters Type Name Description Color self Self color. Single g Set value. Returns Type Description Color Set result. SetR(ref Color, Single) Set r component of an existing Color. Declaration public static ref Color SetR(this ref Color self, float r) Parameters Type Name Description Color self Self color. Single r Set value. Returns Type Description Color Set result. ToTuple(Color) Convert to Tuple. Declaration public static (float r, float g, float b, float a) ToTuple(this Color self) Parameters Type Name Description Color self Self color. Returns Type Description (T1, T2, T3, T4) < Single , Single , Single , Single > Convert result."
  },
  "api/UniEx.GameObjectExtension.html": {
    "href": "api/UniEx.GameObjectExtension.html",
    "title": "Class GameObjectExtension | UniEx",
    "keywords": "Class GameObjectExtension Inheritance Object GameObjectExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtension Methods DestroyAll(IList<GameObject>, Single) Destroy all game objects. Declaration public static void DestroyAll(this IList<GameObject> self, float duration = 0F) Parameters Type Name Description IList < GameObject > self Self list of the game object. Single duration The optional amount of time to delay before destroying the game object. DestroyChildren(GameObject, Single) Destroy children. Declaration public static void DestroyChildren(this GameObject self, float duration = 0F) Parameters Type Name Description GameObject self Self game object. Single duration The optional amount of time to delay before destroying the game object. EachChildren(GameObject, Action<GameObject>) Execute the action on each children. Declaration public static void EachChildren(this GameObject self, Action<GameObject> action) Parameters Type Name Description GameObject self Self game object. Action < GameObject > action The action for children of the list. GetOrAddComponent<T>(GameObject) Returns the component of Type type if the game object has one attached, adds a component if it doesn't. Declaration public static T GetOrAddComponent<T>(this GameObject self) where T : Component Parameters Type Name Description GameObject self Self game object. Returns Type Description T Get or add result. Type Parameters Name Description T The type of component to retrieve. HasComponent<T>(GameObject) Returns true if the game object has component. Declaration public static bool HasComponent<T>(this GameObject self) where T : Component Parameters Type Name Description GameObject self Self game object. Returns Type Description Boolean Check result. Type Parameters Name Description T The type of component to check. RemoveComponent<T>(GameObject, Single) Returns true if the game object remove component. Declaration public static bool RemoveComponent<T>(this GameObject self, float duration = 0F) where T : Component Parameters Type Name Description GameObject self Self game object. Single duration The optional amount of time to delay before destroying the component. Returns Type Description Boolean Remove result. Type Parameters Name Description T The type of component to remove. SetActiveAll(IList<GameObject>, Boolean) Activates / Deactivates all game objects, depending on the given true or false value. Declaration public static void SetActiveAll(this IList<GameObject> self, bool value) Parameters Type Name Description IList < GameObject > self Self list of the game object. Boolean value Activate or deactivate the all game objects, where true activates the GameObject and false deactivates the GameObject. SetActiveChildren(GameObject, Boolean) Activates / Deactivates children, depending on the given true or false value. Declaration public static void SetActiveChildren(this GameObject self, bool value) Parameters Type Name Description GameObject self Self game object. Boolean value Activate or deactivate the children, where true activates the GameObject and false deactivates the GameObject. SetChild(GameObject, GameObject) Set the child of this game object. Declaration public static GameObject SetChild(this GameObject self, GameObject child) Parameters Type Name Description GameObject self Self game object. GameObject child The child to set. Returns Type Description GameObject Self game object. SetChildren(GameObject, IList<GameObject>) Set the children of this game object. Declaration public static GameObject SetChildren(this GameObject self, IList<GameObject> children) Parameters Type Name Description GameObject self Self game object. IList < GameObject > children The children to set. Returns Type Description GameObject Self game object. SetLayer(GameObject, String) Set the layer of this game object. Declaration public static GameObject SetLayer(this GameObject self, string layer) Parameters Type Name Description GameObject self Self game object. String layer The layer to set. Returns Type Description GameObject Self game object. SetTag(GameObject, String) Set the tag of this game object. Declaration public static GameObject SetTag(this GameObject self, string tag) Parameters Type Name Description GameObject self Self game object. String tag The tag to set. Returns Type Description GameObject Self game object."
  },
  "api/UniEx.html": {
    "href": "api/UniEx.html",
    "title": "Namespace UniEx | UniEx",
    "keywords": "Namespace UniEx Classes ColorExtension GameObjectExtension ListExtension MathfExtension MonoBehaviourExtension QuaternionExtension RendererExtension RigidbodyExtension TransformExtension UiExtension Vector2Extension Vector3Extension"
  },
  "api/UniEx.ListExtension.html": {
    "href": "api/UniEx.ListExtension.html",
    "title": "Class ListExtension | UniEx",
    "keywords": "Class ListExtension Inheritance Object ListExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class ListExtension Methods Each<T>(IList<T>, Action<T>) Execute the action on each element of the list. Declaration public static void Each<T>(this IList<T> self, Action<T> action) Parameters Type Name Description IList <T> self Self list. Action <T> action The action for element of the list. Type Parameters Name Description T The type of elements in the list. GetLastIndex<T>(IList<T>) Get the last index of list. Declaration public static int GetLastIndex<T>(this IList<T> self) Parameters Type Name Description IList <T> self Self list. Returns Type Description Int32 Last index of list. Type Parameters Name Description T The type of elements in the list. GetRandomIndex<T>(IList<T>) Get the random index of list. Declaration public static int GetRandomIndex<T>(this IList<T> self) Parameters Type Name Description IList <T> self Self list. Returns Type Description Int32 Random index of list. Type Parameters Name Description T The type of elements in the list. IsNull<T>(IList<T>) Returns true if list is null. Declaration public static bool IsNull<T>(this IList<T> self) Parameters Type Name Description IList <T> self Self list. Returns Type Description Boolean Judge result. Type Parameters Name Description T The type of elements in the list. IsNull<T>(IList<T>, Int32) Returns true if the element of list by index is null. Declaration public static bool IsNull<T>(this IList<T> self, int index) Parameters Type Name Description IList <T> self Self list. Int32 index Index of the list. Returns Type Description Boolean Judge result. Type Parameters Name Description T The type of elements in the list. IsOutOfRange<T>(IList<T>, Int32) Returns true if index is outside the bounds of the list. Declaration public static bool IsOutOfRange<T>(this IList<T> self, int index) Parameters Type Name Description IList <T> self Self list. Int32 index Index of the list. Returns Type Description Boolean Judge result. Type Parameters Name Description T The type of elements in the list. TryGetValue<T>(IList<T>, Int32, out T) If true is returned, the value is the element of list by index. Declaration public static bool TryGetValue<T>(this IList<T> self, int index, out T value) Parameters Type Name Description IList <T> self Self list. Int32 index Index of the list. T value The element of list by index. Returns Type Description Boolean Judge result. Type Parameters Name Description T The type of elements in the list."
  },
  "api/UniEx.MathfExtension.html": {
    "href": "api/UniEx.MathfExtension.html",
    "title": "Class MathfExtension | UniEx",
    "keywords": "Class MathfExtension Inheritance Object MathfExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class MathfExtension Methods ClampDecrement(ref Int32, Int32) Decrements and clamps the given value between the given minimum integer and maximum integer values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref int ClampDecrement(this ref int self, int min) Parameters Type Name Description Int32 self Self integer value. Int32 min The minimum integer value to compare against. Returns Type Description Int32 Clamp decrement result. ClampIncrement(ref Int32, Int32) Increments and clamps the given value between the given minimum integer and maximum integer values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref int ClampIncrement(this ref int self, int max) Parameters Type Name Description Int32 self Self integer value. Int32 max The maximum integer value to compare against. Returns Type Description Int32 Clamp increment result. IsBetween(Int32, Int32, Int32) Returns true if the self integer value is between min and max. Declaration public static bool IsBetween(this int self, int min, int max) Parameters Type Name Description Int32 self Self integer value. Int32 min The minimum integer value to compare against. Int32 max The maximum integer value to compare against. Returns Type Description Boolean Judge result. IsBetween(Single, Single, Single) Returns true if the self floating point value is between min and max. Declaration public static bool IsBetween(this float self, float min, float max) Parameters Type Name Description Single self Self floating point value. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Boolean Judge result. IsEqual(Int32, Int32) Returns true if the self integer value equals target. Declaration public static bool IsEqual(this int self, int target) Parameters Type Name Description Int32 self Self integer value. Int32 target Comparison integer value. Returns Type Description Boolean Judge result. IsEqual(Single, Single) Returns true if the self floating point value equals target. Declaration public static bool IsEqual(this float self, float target) Parameters Type Name Description Single self Self floating point value. Single target Comparison floating point value. Returns Type Description Boolean Judge result. IsEven(Int32) Returns true if the self integer value is even. Declaration public static bool IsEven(this int self) Parameters Type Name Description Int32 self Self integer value. Returns Type Description Boolean Judge result. IsZero(Int32) Returns true if the self integer value equals zero. Declaration public static bool IsZero(this int self) Parameters Type Name Description Int32 self Self integer value. Returns Type Description Boolean Judge result. IsZero(Single) Returns true if the self floating point value equals zero. Declaration public static bool IsZero(this float self) Parameters Type Name Description Single self Self floating point value. Returns Type Description Boolean Judge result. RepeatDecrement(ref Int32, Int32, Int32) Decrements and repeats the given value between the given minimum integer and maximum integer values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref int RepeatDecrement(this ref int self, int min, int max) Parameters Type Name Description Int32 self Self integer value. Int32 min The minimum integer value to compare against. Int32 max The maximum integer value to compare against. Returns Type Description Int32 Repeat decrement result. RepeatIncrement(ref Int32, Int32, Int32) Increments and repeats the given value between the given minimum integer and maximum integer values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref int RepeatIncrement(this ref int self, int min, int max) Parameters Type Name Description Int32 self Self integer value. Int32 min The minimum integer value to compare against. Int32 max The maximum integer value to compare against. Returns Type Description Int32 Repeat increment result."
  },
  "api/UniEx.MonoBehaviourExtension.html": {
    "href": "api/UniEx.MonoBehaviourExtension.html",
    "title": "Class MonoBehaviourExtension | UniEx",
    "keywords": "Class MonoBehaviourExtension Inheritance Object MonoBehaviourExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class MonoBehaviourExtension Methods Delay(MonoBehaviour, Single, Action) Execute delay action. Declaration public static Coroutine Delay(this MonoBehaviour self, float duration, Action action) Parameters Type Name Description MonoBehaviour self Self monoBehaviour. Single duration The time to delay before executing the action. Action action The action to delay. Returns Type Description Coroutine Coroutine. Delay(Single, Action) Execute delay action. Declaration public static IEnumerator Delay(float duration, Action action) Parameters Type Name Description Single duration The time to delay before executing the action. Action action The action to delay. Returns Type Description IEnumerator IEnumerator. DelayFrame(MonoBehaviour, Int32, Action) Execute delay frame action. Declaration public static Coroutine DelayFrame(this MonoBehaviour self, int duration, Action action) Parameters Type Name Description MonoBehaviour self Self monoBehaviour. Int32 duration The frame to delay before executing the action. Action action The action to delay. Returns Type Description Coroutine Coroutine. DelayFrame(Int32, Action) Execute delay frame action. Declaration public static IEnumerator DelayFrame(int duration, Action action) Parameters Type Name Description Int32 duration The frame to delay before executing the action. Action action The action to delay. Returns Type Description IEnumerator IEnumerator."
  },
  "api/UniEx.QuaternionExtension.html": {
    "href": "api/UniEx.QuaternionExtension.html",
    "title": "Class QuaternionExtension | UniEx",
    "keywords": "Class QuaternionExtension Inheritance Object QuaternionExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class QuaternionExtension Methods AddW(ref Quaternion, Single) Add w component of an existing Quaternion. Declaration public static ref Quaternion AddW(this ref Quaternion self, float w) Parameters Type Name Description Quaternion self Self quaternion. Single w Add value. Returns Type Description Quaternion Add result. AddX(ref Quaternion, Single) Add x component of an existing Quaternion. Declaration public static ref Quaternion AddX(this ref Quaternion self, float x) Parameters Type Name Description Quaternion self Self quaternion. Single x Add value. Returns Type Description Quaternion Add result. AddY(ref Quaternion, Single) Add y component of an existing Quaternion. Declaration public static ref Quaternion AddY(this ref Quaternion self, float y) Parameters Type Name Description Quaternion self Self quaternion. Single y Add value. Returns Type Description Quaternion Add result. AddZ(ref Quaternion, Single) Add z component of an existing Quaternion. Declaration public static ref Quaternion AddZ(this ref Quaternion self, float z) Parameters Type Name Description Quaternion self Self quaternion. Single z Add value. Returns Type Description Quaternion Add result. ClampW(ref Quaternion, Single, Single) Clamps the given quaternion w between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Quaternion ClampW(this ref Quaternion self, float min, float max) Parameters Type Name Description Quaternion self Self quaternion. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Quaternion Clamp result. ClampX(ref Quaternion, Single, Single) Clamps the given quaternion x between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Quaternion ClampX(this ref Quaternion self, float min, float max) Parameters Type Name Description Quaternion self Self quaternion. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Quaternion Clamp result. ClampY(ref Quaternion, Single, Single) Clamps the given quaternion y between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Quaternion ClampY(this ref Quaternion self, float min, float max) Parameters Type Name Description Quaternion self Self quaternion. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Quaternion Clamp result. ClampZ(ref Quaternion, Single, Single) Clamps the given quaternion z between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Quaternion ClampZ(this ref Quaternion self, float min, float max) Parameters Type Name Description Quaternion self Self quaternion. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Quaternion Clamp result. MultiplyW(ref Quaternion, Single) Multiply w component of an existing Quaternion. Declaration public static ref Quaternion MultiplyW(this ref Quaternion self, float w) Parameters Type Name Description Quaternion self Self quaternion. Single w Multiply value. Returns Type Description Quaternion Multiply result. MultiplyX(ref Quaternion, Single) Multiply x component of an existing Quaternion. Declaration public static ref Quaternion MultiplyX(this ref Quaternion self, float x) Parameters Type Name Description Quaternion self Self quaternion. Single x Multiply value. Returns Type Description Quaternion Multiply result. MultiplyY(ref Quaternion, Single) Multiply y component of an existing Quaternion. Declaration public static ref Quaternion MultiplyY(this ref Quaternion self, float y) Parameters Type Name Description Quaternion self Self quaternion. Single y Multiply value. Returns Type Description Quaternion Multiply result. MultiplyZ(ref Quaternion, Single) Multiply z component of an existing Quaternion. Declaration public static ref Quaternion MultiplyZ(this ref Quaternion self, float z) Parameters Type Name Description Quaternion self Self quaternion. Single z Multiply value. Returns Type Description Quaternion Multiply result. SetW(ref Quaternion, Single) Set w component of an existing Quaternion. Declaration public static ref Quaternion SetW(this ref Quaternion self, float w) Parameters Type Name Description Quaternion self Self quaternion. Single w Set value. Returns Type Description Quaternion Set result. SetX(ref Quaternion, Single) Set x component of an existing Quaternion. Declaration public static ref Quaternion SetX(this ref Quaternion self, float x) Parameters Type Name Description Quaternion self Self quaternion. Single x Set value. Returns Type Description Quaternion Set result. SetY(ref Quaternion, Single) Set y component of an existing Quaternion. Declaration public static ref Quaternion SetY(this ref Quaternion self, float y) Parameters Type Name Description Quaternion self Self quaternion. Single y Set value. Returns Type Description Quaternion Set result. SetZ(ref Quaternion, Single) Set z component of an existing Quaternion. Declaration public static ref Quaternion SetZ(this ref Quaternion self, float z) Parameters Type Name Description Quaternion self Self quaternion. Single z Set value. Returns Type Description Quaternion Set result. ToTuple(Quaternion) Convert to Tuple. Declaration public static (float x, float y, float z, float w) ToTuple(this Quaternion self) Parameters Type Name Description Quaternion self Self quaternion. Returns Type Description (T1, T2, T3, T4) < Single , Single , Single , Single > Convert result."
  },
  "api/UniEx.RendererExtension.html": {
    "href": "api/UniEx.RendererExtension.html",
    "title": "Class RendererExtension | UniEx",
    "keywords": "Class RendererExtension Inheritance Object RendererExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class RendererExtension Methods AddColorA(SpriteRenderer, Single) Add base color a of the SpriteRenderer. Declaration public static SpriteRenderer AddColorA(this SpriteRenderer self, float a) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single a Add value. Returns Type Description SpriteRenderer Add result. AddColorB(SpriteRenderer, Single) Add base color b of the SpriteRenderer. Declaration public static SpriteRenderer AddColorB(this SpriteRenderer self, float b) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single b Add value. Returns Type Description SpriteRenderer Add result. AddColorG(SpriteRenderer, Single) Add base color g of the SpriteRenderer. Declaration public static SpriteRenderer AddColorG(this SpriteRenderer self, float g) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single g Add value. Returns Type Description SpriteRenderer Add result. AddColorR(SpriteRenderer, Single) Add base color r of the SpriteRenderer. Declaration public static SpriteRenderer AddColorR(this SpriteRenderer self, float r) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single r Add value. Returns Type Description SpriteRenderer Add result. AddEndColorA(LineRenderer, Single) Add end color a of the LineRenderer. Declaration public static LineRenderer AddEndColorA(this LineRenderer self, float a) Parameters Type Name Description LineRenderer self Self lineRenderer. Single a Add value. Returns Type Description LineRenderer Add result. AddEndColorB(LineRenderer, Single) Add end color b of the LineRenderer. Declaration public static LineRenderer AddEndColorB(this LineRenderer self, float b) Parameters Type Name Description LineRenderer self Self lineRenderer. Single b Add value. Returns Type Description LineRenderer Add result. AddEndColorG(LineRenderer, Single) Add end color g of the LineRenderer. Declaration public static LineRenderer AddEndColorG(this LineRenderer self, float g) Parameters Type Name Description LineRenderer self Self lineRenderer. Single g Add value. Returns Type Description LineRenderer Add result. AddEndColorR(LineRenderer, Single) Add end color r of the LineRenderer. Declaration public static LineRenderer AddEndColorR(this LineRenderer self, float r) Parameters Type Name Description LineRenderer self Self lineRenderer. Single r Add value. Returns Type Description LineRenderer Add result. AddStartColorA(LineRenderer, Single) Add start color a of the LineRenderer. Declaration public static LineRenderer AddStartColorA(this LineRenderer self, float a) Parameters Type Name Description LineRenderer self Self lineRenderer. Single a Add value. Returns Type Description LineRenderer Add result. AddStartColorB(LineRenderer, Single) Add start color b of the LineRenderer. Declaration public static LineRenderer AddStartColorB(this LineRenderer self, float b) Parameters Type Name Description LineRenderer self Self lineRenderer. Single b Add value. Returns Type Description LineRenderer Add result. AddStartColorG(LineRenderer, Single) Add start color g of the LineRenderer. Declaration public static LineRenderer AddStartColorG(this LineRenderer self, float g) Parameters Type Name Description LineRenderer self Self lineRenderer. Single g Add value. Returns Type Description LineRenderer Add result. AddStartColorR(LineRenderer, Single) Add start color r of the LineRenderer. Declaration public static LineRenderer AddStartColorR(this LineRenderer self, float r) Parameters Type Name Description LineRenderer self Self lineRenderer. Single r Add value. Returns Type Description LineRenderer Add result. MultiplyColorA(SpriteRenderer, Single) Multiply base color a of the SpriteRenderer. Declaration public static SpriteRenderer MultiplyColorA(this SpriteRenderer self, float a) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single a Multiply value. Returns Type Description SpriteRenderer Multiply result. MultiplyColorB(SpriteRenderer, Single) Multiply base color b of the SpriteRenderer. Declaration public static SpriteRenderer MultiplyColorB(this SpriteRenderer self, float b) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single b Multiply value. Returns Type Description SpriteRenderer Multiply result. MultiplyColorG(SpriteRenderer, Single) Multiply base color g of the SpriteRenderer. Declaration public static SpriteRenderer MultiplyColorG(this SpriteRenderer self, float g) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single g Multiply value. Returns Type Description SpriteRenderer Multiply result. MultiplyColorR(SpriteRenderer, Single) Multiply base color r of the SpriteRenderer. Declaration public static SpriteRenderer MultiplyColorR(this SpriteRenderer self, float r) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single r Multiply value. Returns Type Description SpriteRenderer Multiply result. MultiplyEndColorA(LineRenderer, Single) Multiply end color a of the LineRenderer. Declaration public static LineRenderer MultiplyEndColorA(this LineRenderer self, float a) Parameters Type Name Description LineRenderer self Self lineRenderer. Single a Multiply value. Returns Type Description LineRenderer Multiply result. MultiplyEndColorB(LineRenderer, Single) Multiply end color b of the LineRenderer. Declaration public static LineRenderer MultiplyEndColorB(this LineRenderer self, float b) Parameters Type Name Description LineRenderer self Self lineRenderer. Single b Multiply value. Returns Type Description LineRenderer Multiply result. MultiplyEndColorG(LineRenderer, Single) Multiply end color g of the LineRenderer. Declaration public static LineRenderer MultiplyEndColorG(this LineRenderer self, float g) Parameters Type Name Description LineRenderer self Self lineRenderer. Single g Multiply value. Returns Type Description LineRenderer Multiply result. MultiplyEndColorR(LineRenderer, Single) Multiply end color r of the LineRenderer. Declaration public static LineRenderer MultiplyEndColorR(this LineRenderer self, float r) Parameters Type Name Description LineRenderer self Self lineRenderer. Single r Multiply value. Returns Type Description LineRenderer Multiply result. MultiplyStartColorA(LineRenderer, Single) Multiply start color a of the LineRenderer. Declaration public static LineRenderer MultiplyStartColorA(this LineRenderer self, float a) Parameters Type Name Description LineRenderer self Self lineRenderer. Single a Multiply value. Returns Type Description LineRenderer Multiply result. MultiplyStartColorB(LineRenderer, Single) Multiply start color b of the LineRenderer. Declaration public static LineRenderer MultiplyStartColorB(this LineRenderer self, float b) Parameters Type Name Description LineRenderer self Self lineRenderer. Single b Multiply value. Returns Type Description LineRenderer Multiply result. MultiplyStartColorG(LineRenderer, Single) Multiply start color g of the LineRenderer. Declaration public static LineRenderer MultiplyStartColorG(this LineRenderer self, float g) Parameters Type Name Description LineRenderer self Self lineRenderer. Single g Multiply value. Returns Type Description LineRenderer Multiply result. MultiplyStartColorR(LineRenderer, Single) Multiply start color r of the LineRenderer. Declaration public static LineRenderer MultiplyStartColorR(this LineRenderer self, float r) Parameters Type Name Description LineRenderer self Self lineRenderer. Single r Multiply value. Returns Type Description LineRenderer Multiply result. SetColor(LineRenderer, Color) Set start and end color of the LineRenderer. Declaration public static LineRenderer SetColor(this LineRenderer self, Color color) Parameters Type Name Description LineRenderer self Self lineRenderer. Color color Set value. Returns Type Description LineRenderer Set result. SetColorA(SpriteRenderer, Single) Set base color a of the SpriteRenderer. Declaration public static SpriteRenderer SetColorA(this SpriteRenderer self, float a) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single a Set value. Returns Type Description SpriteRenderer Set result. SetColorB(SpriteRenderer, Single) Set base color b of the SpriteRenderer. Declaration public static SpriteRenderer SetColorB(this SpriteRenderer self, float b) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single b Set value. Returns Type Description SpriteRenderer Set result. SetColorG(SpriteRenderer, Single) Set base color g of the SpriteRenderer. Declaration public static SpriteRenderer SetColorG(this SpriteRenderer self, float g) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single g Set value. Returns Type Description SpriteRenderer Set result. SetColorR(SpriteRenderer, Single) Set base color r of the SpriteRenderer. Declaration public static SpriteRenderer SetColorR(this SpriteRenderer self, float r) Parameters Type Name Description SpriteRenderer self Self spriteRenderer. Single r Set value. Returns Type Description SpriteRenderer Set result. SetEndColorA(LineRenderer, Single) Set end color a of the LineRenderer. Declaration public static LineRenderer SetEndColorA(this LineRenderer self, float a) Parameters Type Name Description LineRenderer self Self lineRenderer. Single a Set value. Returns Type Description LineRenderer Set result. SetEndColorB(LineRenderer, Single) Set end color b of the LineRenderer. Declaration public static LineRenderer SetEndColorB(this LineRenderer self, float b) Parameters Type Name Description LineRenderer self Self lineRenderer. Single b Set value. Returns Type Description LineRenderer Set result. SetEndColorG(LineRenderer, Single) Set end color g of the LineRenderer. Declaration public static LineRenderer SetEndColorG(this LineRenderer self, float g) Parameters Type Name Description LineRenderer self Self lineRenderer. Single g Set value. Returns Type Description LineRenderer Set result. SetEndColorR(LineRenderer, Single) Set end color r of the LineRenderer. Declaration public static LineRenderer SetEndColorR(this LineRenderer self, float r) Parameters Type Name Description LineRenderer self Self lineRenderer. Single r Set value. Returns Type Description LineRenderer Set result. SetNumVertices(LineRenderer, Int32) Set cap and corner vertices of the LineRenderer. Declaration public static LineRenderer SetNumVertices(this LineRenderer self, int numVertices) Parameters Type Name Description LineRenderer self Self lineRenderer. Int32 numVertices Set value. Returns Type Description LineRenderer Set result. SetStartColorA(LineRenderer, Single) Set start color a of the LineRenderer. Declaration public static LineRenderer SetStartColorA(this LineRenderer self, float a) Parameters Type Name Description LineRenderer self Self lineRenderer. Single a Set value. Returns Type Description LineRenderer Set result. SetStartColorB(LineRenderer, Single) Set start color b of the LineRenderer. Declaration public static LineRenderer SetStartColorB(this LineRenderer self, float b) Parameters Type Name Description LineRenderer self Self lineRenderer. Single b Set value. Returns Type Description LineRenderer Set result. SetStartColorG(LineRenderer, Single) Set start color g of the LineRenderer. Declaration public static LineRenderer SetStartColorG(this LineRenderer self, float g) Parameters Type Name Description LineRenderer self Self lineRenderer. Single g Set value. Returns Type Description LineRenderer Set result. SetStartColorR(LineRenderer, Single) Set start color r of the LineRenderer. Declaration public static LineRenderer SetStartColorR(this LineRenderer self, float r) Parameters Type Name Description LineRenderer self Self lineRenderer. Single r Set value. Returns Type Description LineRenderer Set result. SetWidth(LineRenderer, Single) Set start and end width of the LineRenderer. Declaration public static LineRenderer SetWidth(this LineRenderer self, float width) Parameters Type Name Description LineRenderer self Self lineRenderer. Single width Set value. Returns Type Description LineRenderer Set result."
  },
  "api/UniEx.RigidbodyExtension.html": {
    "href": "api/UniEx.RigidbodyExtension.html",
    "title": "Class RigidbodyExtension | UniEx",
    "keywords": "Class RigidbodyExtension Inheritance Object RigidbodyExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class RigidbodyExtension Methods AddAngularVelocityX(Rigidbody, Single) Add the angularVelocity x of the Rigidbody. Declaration public static Rigidbody AddAngularVelocityX(this Rigidbody self, float x) Parameters Type Name Description Rigidbody self Self rigidbody. Single x Add value. Returns Type Description Rigidbody Add result. AddAngularVelocityY(Rigidbody, Single) Add the angularVelocity y of the Rigidbody. Declaration public static Rigidbody AddAngularVelocityY(this Rigidbody self, float y) Parameters Type Name Description Rigidbody self Self rigidbody. Single y Add value. Returns Type Description Rigidbody Add result. AddAngularVelocityZ(Rigidbody, Single) Add the angularVelocity z of the Rigidbody. Declaration public static Rigidbody AddAngularVelocityZ(this Rigidbody self, float z) Parameters Type Name Description Rigidbody self Self rigidbody. Single z Add value. Returns Type Description Rigidbody Add result. AddVelocityX(Rigidbody, Single) Add the velocity x of the Rigidbody. Declaration public static Rigidbody AddVelocityX(this Rigidbody self, float x) Parameters Type Name Description Rigidbody self Self rigidbody. Single x Add value. Returns Type Description Rigidbody Add result. AddVelocityX(Rigidbody2D, Single) Add the velocity x of the Rigidbody2D. Declaration public static Rigidbody2D AddVelocityX(this Rigidbody2D self, float x) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single x Add value. Returns Type Description Rigidbody2D Add result. AddVelocityY(Rigidbody, Single) Add the velocity y of the Rigidbody. Declaration public static Rigidbody AddVelocityY(this Rigidbody self, float y) Parameters Type Name Description Rigidbody self Self rigidbody. Single y Add value. Returns Type Description Rigidbody Add result. AddVelocityY(Rigidbody2D, Single) Add the velocity y of the Rigidbody2D. Declaration public static Rigidbody2D AddVelocityY(this Rigidbody2D self, float y) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single y Add value. Returns Type Description Rigidbody2D Add result. AddVelocityZ(Rigidbody, Single) Add the velocity z of the Rigidbody. Declaration public static Rigidbody AddVelocityZ(this Rigidbody self, float z) Parameters Type Name Description Rigidbody self Self rigidbody. Single z Add value. Returns Type Description Rigidbody Add result. ClampAngularVelocityX(Rigidbody, Single, Single) Clamps the angularVelocity x between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody ClampAngularVelocityX(this Rigidbody self, float min, float max) Parameters Type Name Description Rigidbody self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody Clamp result. ClampAngularVelocityY(Rigidbody, Single, Single) Clamps the angularVelocity y between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody ClampAngularVelocityY(this Rigidbody self, float min, float max) Parameters Type Name Description Rigidbody self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody Clamp result. ClampAngularVelocityZ(Rigidbody, Single, Single) Clamps the angularVelocity z between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody ClampAngularVelocityZ(this Rigidbody self, float min, float max) Parameters Type Name Description Rigidbody self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody Clamp result. ClampVelocityX(Rigidbody, Single, Single) Clamps the velocity x between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody ClampVelocityX(this Rigidbody self, float min, float max) Parameters Type Name Description Rigidbody self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody Clamp result. ClampVelocityX(Rigidbody2D, Single, Single) Clamps the velocity x between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody2D ClampVelocityX(this Rigidbody2D self, float min, float max) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody2D Clamp result. ClampVelocityY(Rigidbody, Single, Single) Clamps the velocity y between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody ClampVelocityY(this Rigidbody self, float min, float max) Parameters Type Name Description Rigidbody self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody Clamp result. ClampVelocityY(Rigidbody2D, Single, Single) Clamps the velocity y between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody2D ClampVelocityY(this Rigidbody2D self, float min, float max) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody2D Clamp result. ClampVelocityZ(Rigidbody, Single, Single) Clamps the velocity z between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Rigidbody ClampVelocityZ(this Rigidbody self, float min, float max) Parameters Type Name Description Rigidbody self Self rigidbody. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Rigidbody Clamp result. MultiplyAngularVelocityX(Rigidbody, Single) Multiply the angularVelocity x of the Rigidbody. Declaration public static Rigidbody MultiplyAngularVelocityX(this Rigidbody self, float x) Parameters Type Name Description Rigidbody self Self rigidbody. Single x Multiply value. Returns Type Description Rigidbody Multiply result. MultiplyAngularVelocityY(Rigidbody, Single) Multiply the angularVelocity y of the Rigidbody. Declaration public static Rigidbody MultiplyAngularVelocityY(this Rigidbody self, float y) Parameters Type Name Description Rigidbody self Self rigidbody. Single y Multiply value. Returns Type Description Rigidbody Multiply result. MultiplyAngularVelocityZ(Rigidbody, Single) Multiply the angularVelocity z of the Rigidbody. Declaration public static Rigidbody MultiplyAngularVelocityZ(this Rigidbody self, float z) Parameters Type Name Description Rigidbody self Self rigidbody. Single z Multiply value. Returns Type Description Rigidbody Multiply result. MultiplyVelocityX(Rigidbody, Single) Multiply the velocity x of the Rigidbody. Declaration public static Rigidbody MultiplyVelocityX(this Rigidbody self, float x) Parameters Type Name Description Rigidbody self Self rigidbody. Single x Multiply value. Returns Type Description Rigidbody Multiply result. MultiplyVelocityX(Rigidbody2D, Single) Multiply the velocity x of the Rigidbody2D. Declaration public static Rigidbody2D MultiplyVelocityX(this Rigidbody2D self, float x) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single x Multiply value. Returns Type Description Rigidbody2D Multiply result. MultiplyVelocityY(Rigidbody, Single) Multiply the velocity y of the Rigidbody. Declaration public static Rigidbody MultiplyVelocityY(this Rigidbody self, float y) Parameters Type Name Description Rigidbody self Self rigidbody. Single y Multiply value. Returns Type Description Rigidbody Multiply result. MultiplyVelocityY(Rigidbody2D, Single) Multiply the velocity y of the Rigidbody2D. Declaration public static Rigidbody2D MultiplyVelocityY(this Rigidbody2D self, float y) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single y Multiply value. Returns Type Description Rigidbody2D Multiply result. MultiplyVelocityZ(Rigidbody, Single) Multiply the velocity z of the Rigidbody. Declaration public static Rigidbody MultiplyVelocityZ(this Rigidbody self, float z) Parameters Type Name Description Rigidbody self Self rigidbody. Single z Multiply value. Returns Type Description Rigidbody Multiply result. ResetAngularVelocity(Rigidbody) Reset the angularVelocity of the Rigidbody. Declaration public static Rigidbody ResetAngularVelocity(this Rigidbody self) Parameters Type Name Description Rigidbody self Self rigidbody. Returns Type Description Rigidbody Reset result. ResetVelocity(Rigidbody) Reset the velocity of the Rigidbody. Declaration public static Rigidbody ResetVelocity(this Rigidbody self) Parameters Type Name Description Rigidbody self Self rigidbody. Returns Type Description Rigidbody Reset result. ResetVelocity(Rigidbody2D) Reset the velocity of the Rigidbody2D. Declaration public static Rigidbody2D ResetVelocity(this Rigidbody2D self) Parameters Type Name Description Rigidbody2D self Self rigidbody. Returns Type Description Rigidbody2D Reset result. SetAngularVelocityX(Rigidbody, Single) Set the angularVelocity x of the Rigidbody. Declaration public static Rigidbody SetAngularVelocityX(this Rigidbody self, float x) Parameters Type Name Description Rigidbody self Self rigidbody. Single x Set value. Returns Type Description Rigidbody Set result. SetAngularVelocityY(Rigidbody, Single) Set the angularVelocity y of the Rigidbody. Declaration public static Rigidbody SetAngularVelocityY(this Rigidbody self, float y) Parameters Type Name Description Rigidbody self Self rigidbody. Single y Set value. Returns Type Description Rigidbody Set result. SetAngularVelocityZ(Rigidbody, Single) Set the angularVelocity z of the Rigidbody. Declaration public static Rigidbody SetAngularVelocityZ(this Rigidbody self, float z) Parameters Type Name Description Rigidbody self Self rigidbody. Single z Set value. Returns Type Description Rigidbody Set result. SetVelocityX(Rigidbody, Single) Set the velocity x of the Rigidbody. Declaration public static Rigidbody SetVelocityX(this Rigidbody self, float x) Parameters Type Name Description Rigidbody self Self rigidbody. Single x Set value. Returns Type Description Rigidbody Set result. SetVelocityX(Rigidbody2D, Single) Set the velocity x of the Rigidbody2D. Declaration public static Rigidbody2D SetVelocityX(this Rigidbody2D self, float x) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single x Set value. Returns Type Description Rigidbody2D Set result. SetVelocityY(Rigidbody, Single) Set the velocity y of the Rigidbody. Declaration public static Rigidbody SetVelocityY(this Rigidbody self, float y) Parameters Type Name Description Rigidbody self Self rigidbody. Single y Set value. Returns Type Description Rigidbody Set result. SetVelocityY(Rigidbody2D, Single) Set the velocity y of the Rigidbody2D. Declaration public static Rigidbody2D SetVelocityY(this Rigidbody2D self, float y) Parameters Type Name Description Rigidbody2D self Self rigidbody. Single y Set value. Returns Type Description Rigidbody2D Set result. SetVelocityZ(Rigidbody, Single) Set the velocity z of the Rigidbody. Declaration public static Rigidbody SetVelocityZ(this Rigidbody self, float z) Parameters Type Name Description Rigidbody self Self rigidbody. Single z Set value. Returns Type Description Rigidbody Set result."
  },
  "api/UniEx.TransformExtension.html": {
    "href": "api/UniEx.TransformExtension.html",
    "title": "Class TransformExtension | UniEx",
    "keywords": "Class TransformExtension Inheritance Object TransformExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class TransformExtension Methods AddEulerAngleX(Transform, Single) Add the rotation x as Euler angles in degrees. Declaration public static Transform AddEulerAngleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Add value. Returns Type Description Transform Add result. AddEulerAngleY(Transform, Single) Add the rotation y as Euler angles in degrees. Declaration public static Transform AddEulerAngleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Add value. Returns Type Description Transform Add result. AddEulerAngleZ(Transform, Single) Add the rotation z as Euler angles in degrees. Declaration public static Transform AddEulerAngleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Add value. Returns Type Description Transform Add result. AddLocalEulerAngleX(Transform, Single) Add the rotation x as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform AddLocalEulerAngleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Add value. Returns Type Description Transform Add result. AddLocalEulerAngleY(Transform, Single) Add the rotation y as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform AddLocalEulerAngleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Add value. Returns Type Description Transform Add result. AddLocalEulerAngleZ(Transform, Single) Add the rotation z as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform AddLocalEulerAngleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Add value. Returns Type Description Transform Add result. AddLocalPositionX(Transform, Single) Add position x of the transform relative to the parent transform. Declaration public static Transform AddLocalPositionX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Add value. Returns Type Description Transform Add result. AddLocalPositionY(Transform, Single) Add position y of the transform relative to the parent transform. Declaration public static Transform AddLocalPositionY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Add value. Returns Type Description Transform Add result. AddLocalPositionZ(Transform, Single) Add position z of the transform relative to the parent transform. Declaration public static Transform AddLocalPositionZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Add value. Returns Type Description Transform Add result. AddLocalScaleX(Transform, Single) Add the scale x of the transform relative to the GameObjects parent. Declaration public static Transform AddLocalScaleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Add value. Returns Type Description Transform Add result. AddLocalScaleY(Transform, Single) Add the scale y of the transform relative to the GameObjects parent. Declaration public static Transform AddLocalScaleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Add value. Returns Type Description Transform Add result. AddLocalScaleZ(Transform, Single) Add the scale z of the transform relative to the GameObjects parent. Declaration public static Transform AddLocalScaleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Add value. Returns Type Description Transform Add result. AddPositionX(Transform, Single) Add the world space position x of the Transform. Declaration public static Transform AddPositionX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Add value. Returns Type Description Transform Add result. AddPositionY(Transform, Single) Add the world space position y of the Transform. Declaration public static Transform AddPositionY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Add value. Returns Type Description Transform Add result. AddPositionZ(Transform, Single) Add the world space position z of the Transform. Declaration public static Transform AddPositionZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Add value. Returns Type Description Transform Add result. ClampEulerAngleX(Transform, Single, Single) Clamps the rotation x as Euler angles in degrees between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampEulerAngleX(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampEulerAngleY(Transform, Single, Single) Clamps the rotation y as Euler angles in degrees between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampEulerAngleY(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampEulerAngleZ(Transform, Single, Single) Clamps the rotation z as Euler angles in degrees between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampEulerAngleZ(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalEulerAngleX(Transform, Single, Single) Clamps the rotation x as Euler angles in degrees relative to the parent transform's rotation between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalEulerAngleX(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalEulerAngleY(Transform, Single, Single) Clamps the rotation y as Euler angles in degrees relative to the parent transform's rotation between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalEulerAngleY(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalEulerAngleZ(Transform, Single, Single) Clamps the rotation z as Euler angles in degrees relative to the parent transform's rotation between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalEulerAngleZ(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalPositionX(Transform, Single, Single) Clamps position x of the transform relative to the parent between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalPositionX(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalPositionY(Transform, Single, Single) Clamps position y of the transform relative to the parent between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalPositionY(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalPositionZ(Transform, Single, Single) Clamps position z of the transform relative to the parent between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalPositionZ(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalScaleX(Transform, Single, Single) Clamps the scale x of the transform relative to the GameObjects parent between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalScaleX(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalScaleY(Transform, Single, Single) Clamps the scale y of the transform relative to the GameObjects parent between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalScaleY(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampLocalScaleZ(Transform, Single, Single) Clamps the scale z of the transform relative to the GameObjects parent between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampLocalScaleZ(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampPositionX(Transform, Single, Single) Clamps the world space position x between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampPositionX(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampPositionY(Transform, Single, Single) Clamps the world space position y between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampPositionY(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. ClampPositionZ(Transform, Single, Single) Clamps the world space position z between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static Transform ClampPositionZ(this Transform self, float min, float max) Parameters Type Name Description Transform self Self transform. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Transform Clamp result. MultiplyEulerAngleX(Transform, Single) Multiply the rotation x as Euler angles in degrees. Declaration public static Transform MultiplyEulerAngleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Multiply value. Returns Type Description Transform Multiply result. MultiplyEulerAngleY(Transform, Single) Multiply the rotation y as Euler angles in degrees. Declaration public static Transform MultiplyEulerAngleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Multiply value. Returns Type Description Transform Multiply result. MultiplyEulerAngleZ(Transform, Single) Multiply the rotation z as Euler angles in degrees. Declaration public static Transform MultiplyEulerAngleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalEulerAngleX(Transform, Single) Multiply the rotation x as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform MultiplyLocalEulerAngleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalEulerAngleY(Transform, Single) Multiply the rotation y as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform MultiplyLocalEulerAngleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalEulerAngleZ(Transform, Single) Multiply the rotation z as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform MultiplyLocalEulerAngleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalPositionX(Transform, Single) Multiply position x of the transform relative to the parent transform. Declaration public static Transform MultiplyLocalPositionX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalPositionY(Transform, Single) Multiply position y of the transform relative to the parent transform. Declaration public static Transform MultiplyLocalPositionY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalPositionZ(Transform, Single) Multiply position z of the transform relative to the parent transform. Declaration public static Transform MultiplyLocalPositionZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalScaleX(Transform, Single) Multiply the scale x of the transform relative to the GameObjects parent. Declaration public static Transform MultiplyLocalScaleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalScaleY(Transform, Single) Multiply the scale y of the transform relative to the GameObjects parent. Declaration public static Transform MultiplyLocalScaleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Multiply value. Returns Type Description Transform Multiply result. MultiplyLocalScaleZ(Transform, Single) Multiply the scale z of the transform relative to the GameObjects parent. Declaration public static Transform MultiplyLocalScaleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Multiply value. Returns Type Description Transform Multiply result. MultiplyPositionX(Transform, Single) Multiply the world space position x of the Transform. Declaration public static Transform MultiplyPositionX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Multiply value. Returns Type Description Transform Multiply result. MultiplyPositionY(Transform, Single) Multiply the world space position y of the Transform. Declaration public static Transform MultiplyPositionY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Multiply value. Returns Type Description Transform Multiply result. MultiplyPositionZ(Transform, Single) Multiply the world space position z of the Transform. Declaration public static Transform MultiplyPositionZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Multiply value. Returns Type Description Transform Multiply result. SetEulerAngleX(Transform, Single) Set the rotation x as Euler angles in degrees. Declaration public static Transform SetEulerAngleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Set value. Returns Type Description Transform Set result. SetEulerAngleY(Transform, Single) Set the rotation y as Euler angles in degrees. Declaration public static Transform SetEulerAngleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Set value. Returns Type Description Transform Set result. SetEulerAngleZ(Transform, Single) Set the rotation z as Euler angles in degrees. Declaration public static Transform SetEulerAngleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Set value. Returns Type Description Transform Set result. SetLocalEulerAngleX(Transform, Single) Set the rotation x as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform SetLocalEulerAngleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Set value. Returns Type Description Transform Set result. SetLocalEulerAngleY(Transform, Single) Set the rotation y as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform SetLocalEulerAngleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Set value. Returns Type Description Transform Set result. SetLocalEulerAngleZ(Transform, Single) Set the rotation z as Euler angles in degrees relative to the parent transform's rotation. Declaration public static Transform SetLocalEulerAngleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Set value. Returns Type Description Transform Set result. SetLocalPositionX(Transform, Single) Set position x of the transform relative to the parent transform. Declaration public static Transform SetLocalPositionX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Set value. Returns Type Description Transform Set result. SetLocalPositionY(Transform, Single) Set position y of the transform relative to the parent transform. Declaration public static Transform SetLocalPositionY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Set value. Returns Type Description Transform Set result. SetLocalPositionZ(Transform, Single) Set position z of the transform relative to the parent transform. Declaration public static Transform SetLocalPositionZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Set value. Returns Type Description Transform Set result. SetLocalScaleX(Transform, Single) Set the scale x of the transform relative to the GameObjects parent. Declaration public static Transform SetLocalScaleX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Set value. Returns Type Description Transform Set result. SetLocalScaleY(Transform, Single) Set the scale y of the transform relative to the GameObjects parent. Declaration public static Transform SetLocalScaleY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Set value. Returns Type Description Transform Set result. SetLocalScaleZ(Transform, Single) Set the scale z of the transform relative to the GameObjects parent. Declaration public static Transform SetLocalScaleZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Set value. Returns Type Description Transform Set result. SetPositionX(Transform, Single) Set the world space position x of the Transform. Declaration public static Transform SetPositionX(this Transform self, float x) Parameters Type Name Description Transform self Self transform. Single x Set value. Returns Type Description Transform Set result. SetPositionY(Transform, Single) Set the world space position y of the Transform. Declaration public static Transform SetPositionY(this Transform self, float y) Parameters Type Name Description Transform self Self transform. Single y Set value. Returns Type Description Transform Set result. SetPositionZ(Transform, Single) Set the world space position z of the Transform. Declaration public static Transform SetPositionZ(this Transform self, float z) Parameters Type Name Description Transform self Self transform. Single z Set value. Returns Type Description Transform Set result. ToRectTransform(Transform) Convert to RectTransform. Declaration public static RectTransform ToRectTransform(this Transform self) Parameters Type Name Description Transform self Self transform. Returns Type Description RectTransform Convert result. TranslateX(Transform, Single, Space) Moves the transform in the direction x and distance of translation. Declaration public static Transform TranslateX(this Transform self, float x, Space space = null) Parameters Type Name Description Transform self Self transform. Single x Value along the x axis. Space space If relativeTo is left out or set to Space.Self the movement is applied relative to the transform's local axes. (the x, y and z axes shown when selecting the object inside the Scene View.) If relativeTo is Space.World the movement is applied relative to the world coordinate system. Returns Type Description Transform Move result. TranslateX(Transform, Single, Transform) Moves the transform in the direction x and distance of translation. Declaration public static Transform TranslateX(this Transform self, float x, Transform relativeTo) Parameters Type Name Description Transform self Self transform. Single x Value along the x axis. Transform relativeTo The movement is applied relative to relativeTo's local coordinate system. If relativeTo is null, the movement is applied relative to the world coordinate system. Returns Type Description Transform Move result. TranslateY(Transform, Single, Space) Moves the transform in the direction y and distance of translation. Declaration public static Transform TranslateY(this Transform self, float y, Space space = null) Parameters Type Name Description Transform self Self transform. Single y Value along the y axis. Space space If relativeTo is left out or set to Space.Self the movement is applied relative to the transform's local axes. (the x, y and z axes shown when selecting the object inside the Scene View.) If relativeTo is Space.World the movement is applied relative to the world coordinate system. Returns Type Description Transform Move result. TranslateY(Transform, Single, Transform) Moves the transform in the direction y and distance of translation. Declaration public static Transform TranslateY(this Transform self, float y, Transform relativeTo) Parameters Type Name Description Transform self Self transform. Single y Value along the y axis. Transform relativeTo The movement is applied relative to relativeTo's local coordinate system. If relativeTo is null, the movement is applied relative to the world coordinate system. Returns Type Description Transform Move result. TranslateZ(Transform, Single, Space) Moves the transform in the direction z and distance of translation. Declaration public static Transform TranslateZ(this Transform self, float z, Space space = null) Parameters Type Name Description Transform self Self transform. Single z Value along the z axis. Space space If relativeTo is left out or set to Space.Self the movement is applied relative to the transform's local axes. (the x, y and z axes shown when selecting the object inside the Scene View.) If relativeTo is Space.World the movement is applied relative to the world coordinate system. Returns Type Description Transform Move result. TranslateZ(Transform, Single, Transform) Moves the transform in the direction z and distance of translation. Declaration public static Transform TranslateZ(this Transform self, float z, Transform relativeTo) Parameters Type Name Description Transform self Self transform. Single z Value along the z axis. Transform relativeTo The movement is applied relative to relativeTo's local coordinate system. If relativeTo is null, the movement is applied relative to the world coordinate system. Returns Type Description Transform Move result."
  },
  "api/UniEx.UiExtension.html": {
    "href": "api/UniEx.UiExtension.html",
    "title": "Class UiExtension | UniEx",
    "keywords": "Class UiExtension Inheritance Object UiExtension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class UiExtension Methods AddColorA<T>(T, Single) Add base color a of the Graphic. Declaration public static T AddColorA<T>(this T self, float a) where T : Graphic Parameters Type Name Description T self Self graphic. Single a Add value. Returns Type Description T Add result. Type Parameters Name Description T Derived from Graphic class. AddColorB<T>(T, Single) Add base color b of the Graphic. Declaration public static T AddColorB<T>(this T self, float b) where T : Graphic Parameters Type Name Description T self Self graphic. Single b Add value. Returns Type Description T Add result. Type Parameters Name Description T Derived from Graphic class. AddColorG<T>(T, Single) Add base color g of the Graphic. Declaration public static T AddColorG<T>(this T self, float g) where T : Graphic Parameters Type Name Description T self Self graphic. Single g Add value. Returns Type Description T Add result. Type Parameters Name Description T Derived from Graphic class. AddColorR<T>(T, Single) Add base color r of the Graphic. Declaration public static T AddColorR<T>(this T self, float r) where T : Graphic Parameters Type Name Description T self Self graphic. Single r Add value. Returns Type Description T Add result. Type Parameters Name Description T Derived from Graphic class. GetDragVector(PointerEventData) Get vector by dragging Declaration public static Vector2 GetDragVector(this PointerEventData self) Parameters Type Name Description PointerEventData self Self pointerEventData. Returns Type Description Vector2 Drag vector. GetLocalFromScreenPoint(RectTransform, Camera, Vector3) Get local point from screen point. Declaration public static Vector2 GetLocalFromScreenPoint(this RectTransform self, Camera camera, Vector3 worldPoint) Parameters Type Name Description RectTransform self Self rectTransform. Camera camera Screen space camera. Vector3 worldPoint World point to convert. Returns Type Description Vector2 Local point. GetWorldFromScreenPoint(RectTransform, Camera, Vector3) Get world point from screen point. Declaration public static Vector3 GetWorldFromScreenPoint(this RectTransform self, Camera camera, Vector3 worldPoint) Parameters Type Name Description RectTransform self Self rectTransform. Camera camera Screen space camera. Vector3 worldPoint World point to convert. Returns Type Description Vector3 World point. MultiplyColorA<T>(T, Single) Multiply base color a of the Graphic. Declaration public static T MultiplyColorA<T>(this T self, float a) where T : Graphic Parameters Type Name Description T self Self graphic. Single a Multiply value. Returns Type Description T Multiply result. Type Parameters Name Description T Derived from Graphic class. MultiplyColorB<T>(T, Single) Multiply base color b of the Graphic. Declaration public static T MultiplyColorB<T>(this T self, float b) where T : Graphic Parameters Type Name Description T self Self graphic. Single b Multiply value. Returns Type Description T Multiply result. Type Parameters Name Description T Derived from Graphic class. MultiplyColorG<T>(T, Single) Multiply base color g of the Graphic. Declaration public static T MultiplyColorG<T>(this T self, float g) where T : Graphic Parameters Type Name Description T self Self graphic. Single g Multiply value. Returns Type Description T Multiply result. Type Parameters Name Description T Derived from Graphic class. MultiplyColorR<T>(T, Single) Multiply base color r of the Graphic. Declaration public static T MultiplyColorR<T>(this T self, float r) where T : Graphic Parameters Type Name Description T self Self graphic. Single r Multiply value. Returns Type Description T Multiply result. Type Parameters Name Description T Derived from Graphic class. SetColorA<T>(T, Single) Set base color a of the Graphic. Declaration public static T SetColorA<T>(this T self, float a) where T : Graphic Parameters Type Name Description T self Self graphic. Single a Set value. Returns Type Description T Set result. Type Parameters Name Description T Derived from Graphic class. SetColorB<T>(T, Single) Set base color b of the Graphic. Declaration public static T SetColorB<T>(this T self, float b) where T : Graphic Parameters Type Name Description T self Self graphic. Single b Set value. Returns Type Description T Set result. Type Parameters Name Description T Derived from Graphic class. SetColorG<T>(T, Single) Set base color g of the Graphic. Declaration public static T SetColorG<T>(this T self, float g) where T : Graphic Parameters Type Name Description T self Self graphic. Single g Set value. Returns Type Description T Set result. Type Parameters Name Description T Derived from Graphic class. SetColorR<T>(T, Single) Set base color r of the Graphic. Declaration public static T SetColorR<T>(this T self, float r) where T : Graphic Parameters Type Name Description T self Self graphic. Single r Set value. Returns Type Description T Set result. Type Parameters Name Description T Derived from Graphic class. SetRange(Slider, Single, Single) Set minimum and maximum floating point value of the Slider. Declaration public static Slider SetRange(this Slider self, float min, float max) Parameters Type Name Description Slider self Self slider. Single min The minimum floating point value of the Slider. Single max The maximum floating point value of the Slider. Returns Type Description Slider Set result."
  },
  "api/UniEx.Vector2Extension.html": {
    "href": "api/UniEx.Vector2Extension.html",
    "title": "Class Vector2Extension | UniEx",
    "keywords": "Class Vector2Extension Inheritance Object Vector2Extension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class Vector2Extension Methods AddX(ref Vector2, Single) Add x component of an existing Vector2. Declaration public static ref Vector2 AddX(this ref Vector2 self, float x) Parameters Type Name Description Vector2 self Self vector. Single x Add value. Returns Type Description Vector2 Add result. AddY(ref Vector2, Single) Add y component of an existing Vector2. Declaration public static ref Vector2 AddY(this ref Vector2 self, float y) Parameters Type Name Description Vector2 self Self vector. Single y Add value. Returns Type Description Vector2 Add result. ClampX(ref Vector2, Single, Single) Clamps the given vector x between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Vector2 ClampX(this ref Vector2 self, float min, float max) Parameters Type Name Description Vector2 self Self vector. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Vector2 Clamp result. ClampY(ref Vector2, Single, Single) Clamps the given vector y between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Vector2 ClampY(this ref Vector2 self, float min, float max) Parameters Type Name Description Vector2 self Self vector. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Vector2 Clamp result. GetSqrLength(Vector2, Vector2) Returns the squared length of this vector to the target. Declaration public static float GetSqrLength(this Vector2 self, Vector2 target) Parameters Type Name Description Vector2 self Self vector. Vector2 target Target vector. Returns Type Description Single The squared length of this vector to the target. MultiplyX(ref Vector2, Single) Multiply x component of an existing Vector2. Declaration public static ref Vector2 MultiplyX(this ref Vector2 self, float x) Parameters Type Name Description Vector2 self Self vector. Single x Multiply value. Returns Type Description Vector2 Multiply result. MultiplyY(ref Vector2, Single) Multiply y component of an existing Vector2. Declaration public static ref Vector2 MultiplyY(this ref Vector2 self, float y) Parameters Type Name Description Vector2 self Self vector. Single y Multiply value. Returns Type Description Vector2 Multiply result. SetX(ref Vector2, Single) Set x component of an existing Vector2. Declaration public static ref Vector2 SetX(this ref Vector2 self, float x) Parameters Type Name Description Vector2 self Self vector. Single x Set value. Returns Type Description Vector2 Set result. SetY(ref Vector2, Single) Set y component of an existing Vector2. Declaration public static ref Vector2 SetY(this ref Vector2 self, float y) Parameters Type Name Description Vector2 self Self vector. Single y Set value. Returns Type Description Vector2 Set result. ToTuple(Vector2) Convert to Tuple. Declaration public static (float x, float y) ToTuple(this Vector2 self) Parameters Type Name Description Vector2 self Self vector. Returns Type Description (T1, T2) < Single , Single > Convert result."
  },
  "api/UniEx.Vector3Extension.html": {
    "href": "api/UniEx.Vector3Extension.html",
    "title": "Class Vector3Extension | UniEx",
    "keywords": "Class Vector3Extension Inheritance Object Vector3Extension Namespace : UniEx Assembly : cs.temp.dll.dll Syntax public static class Vector3Extension Properties xy Shorthand for writing Vector3(1, 1, 0). Declaration public static Vector3 xy { get; } Property Value Type Description Vector3 xz Shorthand for writing Vector3(1, 0, 1). Declaration public static Vector3 xz { get; } Property Value Type Description Vector3 yz Shorthand for writing Vector3(0, 1, 1). Declaration public static Vector3 yz { get; } Property Value Type Description Vector3 Methods AddX(ref Vector3, Single) Add x component of an existing Vector3. Declaration public static ref Vector3 AddX(this ref Vector3 self, float x) Parameters Type Name Description Vector3 self Self vector. Single x Add value. Returns Type Description Vector3 Add result. AddY(ref Vector3, Single) Add y component of an existing Vector3. Declaration public static ref Vector3 AddY(this ref Vector3 self, float y) Parameters Type Name Description Vector3 self Self vector. Single y Add value. Returns Type Description Vector3 Add result. AddZ(ref Vector3, Single) Add z component of an existing Vector3. Declaration public static ref Vector3 AddZ(this ref Vector3 self, float z) Parameters Type Name Description Vector3 self Self vector. Single z Add value. Returns Type Description Vector3 Add result. ClampX(ref Vector3, Single, Single) Clamps the given vector x between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Vector3 ClampX(this ref Vector3 self, float min, float max) Parameters Type Name Description Vector3 self Self vector. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Vector3 Clamp result. ClampY(ref Vector3, Single, Single) Clamps the given vector y between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Vector3 ClampY(this ref Vector3 self, float min, float max) Parameters Type Name Description Vector3 self Self vector. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Vector3 Clamp result. ClampZ(ref Vector3, Single, Single) Clamps the given vector z between the given minimum float and maximum float values. Returns the given value if it is within the minimum and maximum range. Declaration public static ref Vector3 ClampZ(this ref Vector3 self, float min, float max) Parameters Type Name Description Vector3 self Self vector. Single min The minimum floating point value to compare against. Single max The maximum floating point value to compare against. Returns Type Description Vector3 Clamp result. GetLength(Vector3, Vector3) Returns the length of this vector to the target. Declaration public static float GetLength(this Vector3 self, Vector3 target) Parameters Type Name Description Vector3 self Self vector. Vector3 target Target vector. Returns Type Description Single The length of this vector to the target. GetSqrLength(Vector3, Vector3) Returns the squared length of this vector to the target. Declaration public static float GetSqrLength(this Vector3 self, Vector3 target) Parameters Type Name Description Vector3 self Self vector. Vector3 target Target vector. Returns Type Description Single The squared length of this vector to the target. MultiplyX(ref Vector3, Single) Multiply x component of an existing Vector3. Declaration public static ref Vector3 MultiplyX(this ref Vector3 self, float x) Parameters Type Name Description Vector3 self Self vector. Single x Multiply value. Returns Type Description Vector3 Multiply result. MultiplyY(ref Vector3, Single) Multiply y component of an existing Vector3. Declaration public static ref Vector3 MultiplyY(this ref Vector3 self, float y) Parameters Type Name Description Vector3 self Self vector. Single y Multiply value. Returns Type Description Vector3 Multiply result. MultiplyZ(ref Vector3, Single) Multiply z component of an existing Vector3. Declaration public static ref Vector3 MultiplyZ(this ref Vector3 self, float z) Parameters Type Name Description Vector3 self Self vector. Single z Multiply value. Returns Type Description Vector3 Multiply result. SetX(ref Vector3, Single) Set x component of an existing Vector3. Declaration public static ref Vector3 SetX(this ref Vector3 self, float x) Parameters Type Name Description Vector3 self Self vector. Single x Set value. Returns Type Description Vector3 Set result. SetY(ref Vector3, Single) Set y component of an existing Vector3. Declaration public static ref Vector3 SetY(this ref Vector3 self, float y) Parameters Type Name Description Vector3 self Self vector. Single y Set value. Returns Type Description Vector3 Set result. SetZ(ref Vector3, Single) Set z component of an existing Vector3. Declaration public static ref Vector3 SetZ(this ref Vector3 self, float z) Parameters Type Name Description Vector3 self Self vector. Single z Set value. Returns Type Description Vector3 Set result. ToTuple(Vector3) Convert to Tuple. Declaration public static (float x, float y, float z) ToTuple(this Vector3 self) Parameters Type Name Description Vector3 self Self vector. Returns Type Description (T1, T2, T3) < Single , Single , Single > Convert result."
  },
  "index.html": {
    "href": "index.html",
    "title": "UniEx | UniEx",
    "keywords": "UniEx UniEx is extension methods for Unity. Documentation Here . Installation Please choose Unity Package Manager to Add package from git URL... and enter this URL. https://github.com/kitatas/UniEx.git?path=/Assets/UniEx Target Environment Unity2021.3 or later LICENSE MIT License."
  }
}